package com.company.service;

import java.util.List;
import java.util.Optional;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.company.model.User;
import com.company.repository.UserRepository;

@Service
public class UserService implements UserDetailsService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    // Constructor injection (cleaner than @Autowired on fields)
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    // ✅ Register new user with encoded password
    public User registerUser(User user) {
        if (userRepository.existsByEmail(user.getEmail())) {
            throw new RuntimeException("Email already exists!");
        }
        user.setPassword(passwordEncoder.encode(user.getPassword())); // secure password
        return userRepository.save(user);
    }

    // 🔎 Find user by ID
    public Optional<User> getUserById(Long id) {
        return userRepository.findById(id);
    }

    // 🔎 Find user by email
    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    // 🔎 Find user by name
    public Optional<User> getUserByName(String name) {
        return userRepository.findByName(name);
    }

    // 🔎 Find users by role
    public List<User> getUsersByRole(User.Role role) {
        return userRepository.findAll()
                .stream()
                .filter(u -> u.getRole().equals(role))
                .toList();
    }

    // 📋 Get all users
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // ✏️ Update user
    public User updateUser(User user) {
        return userRepository.save(user);
    }

    // ❌ Removed: "login()" → handled by Spring Security
    // ❌ Removed: duplicate register()

    // 🔐 Load user for Spring Security login
    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
            .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        return org.springframework.security.core.userdetails.User
                .withUsername(user.getEmail())
                .password(user.getPassword()) // already encoded
                .roles(user.getRole().name()) // "USER" or "ADMIN"
                .build();
    }
    
    public User login(String email, String rawPassword) {
        Optional<User> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            if (passwordEncoder.matches(rawPassword, user.getPassword())) {
                return user; // login success
            }
        }
        return null; // login failed
    }
}
