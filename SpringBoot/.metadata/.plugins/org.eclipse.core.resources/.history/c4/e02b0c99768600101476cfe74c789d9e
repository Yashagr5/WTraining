package com.company.controller;

import java.security.Principal;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.company.model.Comment;
import com.company.model.Task;
import com.company.model.Task.Status;
import com.company.model.User;
import com.company.service.CommentService;
import com.company.service.TaskService;
import com.company.service.UserService;

@Controller
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private TaskService taskService;

    @Autowired
    private CommentService commentService;

    // ================== USER DASHBOARD ==================
    @GetMapping("/dashboard")
    public String dashboard(Model model, Principal principal) {
        // Get logged-in user's email
        String email = principal.getName();

        // Fetch User entity from DB
        User user = userService.findByEmail(email);

        if (user == null) {
            // fallback if user not found
            return "redirect:/login";
        }

        // Add user to the model
        model.addAttribute("user", user);

        // Fetch user's tasks and counts
        List<Task> tasks = taskService.getTasksByUser(user);
        model.addAttribute("tasks", tasks);
        model.addAttribute("totalTasks", tasks.size());
        model.addAttribute("pendingCount", tasks.stream().filter(t -> t.getStatus() == Status.PENDING).count());
        model.addAttribute("inProgressCount", tasks.stream().filter(t -> t.getStatus() == Status.IN_PROGRESS).count());
        model.addAttribute("completedCount", tasks.stream().filter(t -> t.getStatus() == Status.COMPLETED).count());

        return "user/dashboard";
    }
    
 // ================== MY TASKS PAGE ==================
    @GetMapping("/tasks")
    public String myTasks(Model model, Principal principal) {
        String email = principal.getName();
        User user = userService.findByEmail(email);

        if (user == null) {
            return "redirect:/login";
        }

        List<Task> tasks = taskService.getTasksByUser(user);
        model.addAttribute("tasks", tasks);

        return "user/tasks";  // ðŸ‘ˆ maps to your user/tasks.html
    }

 // ================== UPDATE TASK STATUS ==================
    @GetMapping("/tasks/updateStatus")
    public String updateTaskStatus(@RequestParam Long taskId,
                                   @RequestParam String status,
                                   Principal principal) {

        String email = principal.getName();
        User user = userService.findByEmail(email);

        if (user == null) {
            return "redirect:/login";
        }

        taskService.getTaskById(taskId).ifPresent(task -> {
            if (task.getAssignedUser().getId().equals(user.getId())) {
                try {
                    Task.Status enumStatus = Task.Status.valueOf(status.toUpperCase());
                    task.setStatus(enumStatus);
                    taskService.saveTask(task);
                } catch (IllegalArgumentException e) {
                    // invalid status string
                }
            }
        });

        return "redirect:/user/tasks";  // ðŸ‘ˆ back to tasks page
    }
    
    // ================== VIEW COMMENTS ==================
    @GetMapping("/tasks/comments")
    public String viewComments(@RequestParam("taskId") Long taskId, Model model) {
        Task task = taskService.getTasksById(taskId);
        if (task == null) return "redirect:/user/dashboard";

        List<Comment> comments = commentService.getCommentsByTask(task);
        model.addAttribute("task", task);
        model.addAttribute("comments", comments);

        return "user/comments"; // Thymeleaf HTML
    }

 
    // ================== POST COMMENT ==================
    @PostMapping("/tasks/comment")
    public String postComment(@RequestParam("taskId") Long taskId,
                              @RequestParam("content") String content,
                              Principal principal) {
        String email = principal.getName();
        User user = userService.findByEmail(email);
        Task task = taskService.getTasksById(taskId);

        if (user != null && task != null && content != null && !content.trim().isEmpty()) {
            commentService.addComment(task, user, content.trim());
        }

        return "redirect:/user/tasks/comments?taskId=" + taskId;
    }
   
}
