package com.company.controller;

import java.security.Principal;
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.company.model.Comment;
import com.company.model.Task;
import com.company.model.Task.Status;
import com.company.model.User;
import com.company.service.CommentService;
import com.company.service.TaskService;
import com.company.service.UserService;

@Controller
@RequestMapping("/user/tasks")
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private TaskService taskService;

    @Autowired
    private CommentService commentService;
    
 // ================== USER DASHBOARD ==================
    @GetMapping("/dashboard")
    public String dashboard(Model model, Principal principal) {
        // Get logged-in user's email
        String email = principal.getName();

        // Fetch User entity from DB
        User user = userService.findByEmail(email);

        if (user == null) {
            // fallback if user not found
            return "redirect:/login";
        }

        // Add user to the model
        model.addAttribute("user", user);

        // Fetch user's tasks and counts
        List<Task> tasks = taskService.getTasksByUser(user);
        model.addAttribute("tasks", tasks);
        model.addAttribute("totalTasks", tasks.size());
        model.addAttribute("pendingCount", tasks.stream().filter(t -> t.getStatus() == Status.PENDING).count());
        model.addAttribute("inProgressCount", tasks.stream().filter(t -> t.getStatus() == Status.IN_PROGRESS).count());
        model.addAttribute("completedCount", tasks.stream().filter(t -> t.getStatus() == Status.COMPLETED).count());

        return "user/dashboard";
    }

    // ========== View all tasks ==========
    @GetMapping
    public String tasksPage(Model model, Principal principal) {
        String email = principal.getName();
        User user = userService.findByEmail(email);
        List<Task> tasks = taskService.getTasksByUser(user);

        model.addAttribute("tasks", tasks);
        return "user/tasks";
    }

    // ========== Update task status ==========
    @GetMapping("/updateStatus")
    public String updateTaskStatus(@RequestParam("taskId") Long taskId,
                                   @RequestParam("status") String status) {
        taskService.updateTaskStatus(taskId, status);
        return "redirect:/user/tasks";
    }

    // ========== View comments for a task ==========
    @GetMapping("/comments")
    public String viewComments(@RequestParam("taskId") Long taskId, Model model) {
        Task task = taskService.getTasksById(taskId);
        List<Comment> comments = commentService.getCommentsByTask(task);

        model.addAttribute("task", task);
        model.addAttribute("comments", comments);
        return "user/comments";
    }

    // ========== Add comment to a task ==========
    @PostMapping("/comments/add")
    public String addComment(@RequestParam("taskId") Long taskId,
                             @RequestParam("content") String content,
                             Principal principal) {
        String email = principal.getName();
        User user = userService.findByEmail(email);
        Task task = taskService.getTasksById(taskId);

        Comment comment = new Comment();
        comment.setTask(task);
        comment.setUser(user);
        comment.setCommentText(content); // Make sure your Comment entity has commentText field
        comment.setCreatedAt(LocalDateTime.now());

        commentService.saveComment(comment);

        return "redirect:/user/tasks/comments?taskId=" + taskId;
    }
}
