package com.company.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.company.model.User;
import com.company.repository.UserRepository;

@Service
public class UserService implements UserDetailsService{

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    // Create or register a new user
    public User registerUser(User user) {
        if (userRepository.existsByEmail(user.getEmail())) {
            throw new RuntimeException("Email already exists!");
        }
        user.setPassword(passwordEncoder.encode(user.getPassword())); // secure password
        return userRepository.save(user);
    }

    // Find user by ID
    public Optional<User> getUserById(Long id) {
        return userRepository.findById(id);
    }

    // Find user by email (for authentication)
    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    // Find user by name
    public Optional<User> getUserByName(String name) {
        return userRepository.findByName(name);
    }

    // Find users by role
    public List<User> getUsersByRole(User.Role role) {
        return userRepository.findAll()
                .stream()
                .filter(u -> u.getRole().equals(role))
                .toList();
    }

    // Get all users
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // Update existing user
    public User updateUser(User user) {
    	 User user = userRepository.findById(id)
                 .orElseThrow(() -> new RuntimeException("User not found with id: " + id));
         
         user.setName(userDetails.getName());
         user.setEmail(userDetails.getEmail());
         user.setRole(userDetails.getRole());
         
         return userRepository.save(user);
    }

    // Delete user by ID
    public void deleteUser(Long id) {
    	  User user = userRepository.findById(id)
                  .orElseThrow(() -> new RuntimeException("User not found with id: " + id));
          
          if (user.getRole() == User.Role.ADMIN) {
              throw new RuntimeException("Cannot delete admin users");
          }
          
          userRepository.deleteById(id);
    }
}
