package com.wipro;

public class StringExample {

	public static void main(String[] args) {
String s = "Yash";
System.out.println(s.hashCode());
System.out.println(System.identityHashCode(s));
String s1= new String("Yash");
System.out.println(s1.hashCode());
System.out.println(System.identityHashCode(s1));
//
//System.out.println(s==s1); // different reference values
//System.out.println(s.equals(s1)); // it checks the content


// String concatenation
//String sValue1="Yash";
//String sValue2 = "Ya"+"sh";
//final String sValue3 = "Ya";
//final String sValue4 = "sh";
//String newValue =sValue3+sValue4; //it will be constant at compile time only  -- So compiler will recognize the final values as constant at compile time.out.println(sValue1 == newValue);
//
//String a1 = "Niti";
//String b1 = new String("Niti");
//
//String c1 = b1.intern(); // we are manually telling to the compiler to put this string into the pool 
//
//System.out.println(a1==b1); //false 
//System.out.println(a1==c1); // true


//literal 
//new keyword
//hashCode()
//identityHashCode()
//concatenation at compile time and runtime
//==  ( comparing the memory reference)
//.equals (comparing the content)
//.intern() (forcing manually to use it as a string pool version)
	}

}




//package com.wipro;
//
//public class StringExample {
//
//	public static void main(String[] args) {
//		// TODO Auto-generated method stub
//		
//		// Creating a string object using a literal
//		
//		String s = "Niti";  // String Pool in Heap 
//		System.out.println(s.hashCode());
//		// this gives the actual memory identity where it is stored
//		System.out.println(System.identityHashCode(s));
//		//  creating a string object using new keyword
//		
//		String s1 = new String("Nitin"); // Heap  
//		
//		System.out.println(s1.hashCode());  //if same content as S object has then it will give the same hash
//		System.out.println(System.identityHashCode(s1)); // different memory and different value
//		
//		
//		// Whenever the String class overrides
//		// the hashCode() method then it is computing on the basis 
//		// of the content not the memory location
//		
//		System.out.println(s==s1); // different memory references
//		System.out.println(s.equals(s1)); // it check the content
//		
//	
//		
//	}
//
//}
